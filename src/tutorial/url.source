
DROP TABLE test_url;
DROP TYPE  url CASCADE;
DROP TABLE  IF EXISTS AccessLog   CASCADE ;
---------------------------------------------------------------------------
--
-- complex.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
-- 
--
-- Portions Copyright (c) 1996-2010, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- $PostgreSQL: pgsql/src/tutorial/url.source,v 1.24 2010/01/02 16:58:17 momjian Exp $
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'complex' which represents
--	complex numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/complex$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/complex.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'complex_in' takes a null-terminated string (the 
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'complex'
-- does not exist yet but that's okay.


CREATE FUNCTION url_in(cstring)
   RETURNS url
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'complex_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION url_out(url)
   RETURNS cstring
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'complex_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION url_recv(internal)
   RETURNS url
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'complex_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION url_send(url)
   RETURNS bytea
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

 CREATE TYPE url (
   internallength = variable, 
   input = url_in,
   output = url_out,
 receive = url_recv,
  send = url_send
 --alignment = char
 
);


-----------------------------
-- Using the new type:
--	user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table

CREATE TABLE test_url (
	a	url

);

-- data for user-defined types are just strings in the proper textual
-- representation. 

INSERT INTO test_url VALUES ('http://www.baidu.com/');
INSERT INTO test_url VALUES ('http://www.baidu.com/aaa/aa/aaa?a=a');

--SELECT * FROM test_url;

-----------------------------
-- Creating an operator for the new type:
--	Let's define an add operator for complex types. Since POSTGRES
--	supports function overloading, we'll use + as the add operator.
--	(Operator names can be reused with different numbers and types of 
--	arguments.)
-----------------------------


-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators
CREATE FUNCTION url_abs_lt(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION url_abs_le(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION url_abs_eq(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION url_abs_ge(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION url_abs_gt(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION url_abs_notsameweb(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION url_abs_sameweb(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION url_abs_neq(url, url) RETURNS bool
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = url, rightarg = url, procedure = url_abs_lt,
   commutator = > , --negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = url, rightarg = url, procedure = url_abs_le,
   commutator = >= , --negator = > ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR = (
   leftarg = url, rightarg = url, procedure = url_abs_eq,HASHES,
   commutator = = ,hashes
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
 --  restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR >= (
   leftarg = url, rightarg = url, procedure = url_abs_ge,
   commutator = <= , --negator = < ,
   restrict = scalargtsel, join = scalargtjoinsel
);
CREATE OPERATOR > (
   leftarg = url, rightarg = url, procedure = url_abs_gt

);
CREATE OPERATOR <> (
   leftarg = url, rightarg = url, procedure = url_abs_neq
  
   
);

CREATE OPERATOR ~ (
   leftarg = url, rightarg = url, procedure = url_abs_sameweb
  
   
);
CREATE OPERATOR !~ (
   leftarg = url, rightarg = url, procedure = url_abs_notsameweb
  
   
);

-- create the support function too
--CREATE FUNCTION isLessthan(url, url) RETURNS int4
  --AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
  
--  CREATE FUNCTION isUrlEqual(url, url) RETURNS int4
  --AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
  
--  CREATE FUNCTION isGreatthan(url, url) RETURNS int4
  --AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;


-- now we can make the operator class

CREATE FUNCTION url_hash(url) RETURNS int4
   AS '_OBJWD_/url' LANGUAGE C IMMUTABLE STRICT;
   
CREATE OPERATOR CLASS url_hash_class
	DEFAULT FOR TYPE url USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       url_hash(url);



-- now, we can define a btree index on complex types. First, let's populate
-- the table. Note that postgres needs many more tuples to start using the
-- btree index during selects.
INSERT INTO test_url VALUES ('http://www.baidu.com/aaa');
INSERT INTO test_url VALUES ('http://www.baidu.com/aaa/aa?a=a');
INSERT INTO test_url VALUES ('http://www.baidu.com/bbb');
INSERT INTO test_url VALUES ('http://www.baidu.com/b/aa?a=a');
INSERT INTO test_url VALUES ('http://www.cse.unsw.edu.au/');
INSERT INTO test_url VALUES ('http://www.cse.unsw.edu.au/asdfsadf/sdf/fsd.jsp');
INSERT INTO test_url VALUES ('http://www.cse.unsw.edu.au:9090/atmsdf/asdf/sdf?gwer=asdf');


	SELECT * from test_url where a = 'http://www.baidu.com/aaa';
SELECT * from test_url where a < 'http://www.baidu.com/aaa/aa?a=a';
SELECT * from test_url where a > 'http://www.baidu.com/aaa/aa?a=a';

create table AccessLog (
   id        serial primary key,
   path      url,
   accessed  timestamp
);
insert into AccessLog(path,accessed) values
('http://www.CsE.unsw.edu.au/aa/aaa/','2011-09-11 09:30'),
('http://www.CsE.unsw.edu.au/aa/aaa/','2011-09-11 09:32'),
('http://www.cse.unsw.edu.au/aa/aaa/index.html','2011-09-11 09:31'),
('http://www.cse.unsw.edu.au/staff/index.php','2011-09-11 09:32'),
('http://www.unsw.edu.au/','2011-09-11 09:33'),
('http://blah.unsw.edu.au/magpie/monitor.php?s=4e71745ea7174', '2011-09-11 09:33'),
('http://www.unsw.edu.au/index.html','2011-09-11 09:34'),
('http://mahler.cse.unsw.edu.au/webcms2/course/index.php?cid=2196','2011-09-11 09:35'),
('http://mahler.cse.unsw.edu.au/webcms2/works/index.php?cid=2196&inc=LN','2011-09-11 09:35'),
('https://my.unsw.edu.au/portal/dt?','2011-09-11 09:35'),
('http://blah.com/xx/get.php?id=55','2011-09-11 09:36'),
('https://my.cse.unsw.edu.au/index.php','2011-09-11 09:37');

create index on AccessLog using hash(path);


--select * from AccessLog;
select a.path, b.path	
from   AccessLog a, AccessLog b
where  a.path = b.path and a.accessed < b.accessed;

select path,count(*)
from   AccessLog
group  by path;

-- clean up the example
--DROP TABLE test_url;
--DROP TYPE url CASCADE;
