---------------------------------------------------------------------------
--
-- complex.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
-- 
--
-- Portions Copyright (c) 1996-2010, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- $PostgreSQL: pgsql/src/tutorial/complex.source,v 1.24 2010/01/02 16:58:17 momjian Exp $
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'complex' which represents
--	complex numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/complex$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/complex.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'complex_in' takes a null-terminated string (the 
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'complex'
-- does not exist yet but that's okay.


CREATE FUNCTION url_in(cstring)
   RETURNS url
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'complex_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION url_out(complex)
   RETURNS cstring
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'complex_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION url_recv(internal)
   RETURNS url
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'complex_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION url_send(complex)
   RETURNS bytea
   AS '_OBJWD_/url'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

 CREATE TYPE url (
   internallength = 16, 
   input = url_in,
   output = url_out,
   receive = url_recv,
   send = url_send,
   alignment = double
);


-----------------------------
-- Using the new type:
--	user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table

CREATE TABLE test_url (
	a	url,
	b	url
);

-- data for user-defined types are just strings in the proper textual
-- representation. 

INSERT INTO test_url VALUES ('http://www.baidu.com/');
INSERT INTO test_url VALUES ('http//www.baidu.com/aaa/aa/aaa?a=a');

SELECT * FROM test_url;

-----------------------------
-- Creating an operator for the new type:
--	Let's define an add operator for complex types. Since POSTGRES
--	supports function overloading, we'll use + as the add operator.
--	(Operator names can be reused with different numbers and types of 
--	arguments.)
-----------------------------

DROP TABLE test_url;
DROP TYPE complex url;
